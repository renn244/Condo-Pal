// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  tenant
  landlord
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  profile       String?
  name          String?
  password      String?

  role          Role     @default(landlord)

  //  properties Property[]
  isOAuth       Boolean  @default(false)
  provider      String? // e.g, "google", "local"
  providerId    String?  @unique // Unique ID from OAuth provider

  subscriptions Subscription[]

  condos        Condo[]  @relation("Owner")
  condo         Condo?   @relation("Tenant") 

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model refreshToken {
  id         String   @id @default(cuid())
  userId     String // the user
  token      String // the random unique token

  createdAt  DateTime @default(now())
}

model resetPassword {
  id         String   @id @default(cuid())
  userId     String // the user
  token      String // the random unique token

  createdAt  DateTime @default(now())
  expiresAt  DateTime // the token expiration date // 1 hour
}

enum SubscriptionType {
  Starter
  Pro
  Enterprise
}

model Subscription {
  id          String   @id @default(cuid())
  type        SubscriptionType
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  linkId      String? // this the the linkId of the link payment
  isPaid      Boolean @default(false)

  createdAt   DateTime @default(now())
  expiresAt   DateTime

  canceledAt  DateTime? // is this needed?
}

model Condo {
  id          String    @id @default(cuid())
  name        String    // to easily remember certain condo's
  address     String 
  photo       String

  ownerId     String
  owner       User      @relation("Owner", fields: [ownerId], references: [id])

  tenantId    String?   @unique
  tenant      User?     @relation("Tenant", fields: [tenantId], references: [id])

  rentAmount  Float     // per month
  isActive    Boolean   // if there is currently a tenant or not?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // used for update and delete to make sure the one performing those actions is the owner
  @@unique([id, ownerId]) 
}